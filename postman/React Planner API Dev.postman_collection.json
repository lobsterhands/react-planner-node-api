{
	"variables": [],
	"info": {
		"name": "React Planner API Dev",
		"_postman_id": "d67b9677-289a-4549-07fd-7f1c02470b87",
		"description": "Collection for testing the Conduit API\n\nhttps://github.com/gothinkster/realworld",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Activities with authentication",
			"description": "",
			"item": [
				{
					"name": "Create Activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"activity\" property'] = responseJSON.hasOwnProperty('activity');",
									"",
									"var activity = responseJSON.activity || {};",
									"",
									"tests['Activity has \"title\" property'] = activity.hasOwnProperty('title');",
									"tests['Activity has \"body\" property'] = activity.hasOwnProperty('body');",
									"tests['Activity has \"completed\" property'] = activity.hasOwnProperty('completed');",
									"tests['Activity has \"dateStart\" property'] = activity.hasOwnProperty('dateStart');",
									"tests['Activity has \"dateEnd\" property'] = activity.hasOwnProperty('dateEnd');",
									"tests['Activity has \"createdAt\" property'] = activity.hasOwnProperty('createdAt');",
									"tests['Activity\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(activity.createdAt).toISOString() === activity.createdAt;",
									"tests['Activity has \"updatedAt\" property'] = activity.hasOwnProperty('updatedAt');",
									"tests['Activity\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(activity.updatedAt).toISOString() === activity.updatedAt;",
									"tests['Activity has \"tagList\" property'] = activity.hasOwnProperty('tagList');",
									"tests['Activity\\'s \"tagList\" property is an Array'] = Array.isArray(activity.tagList);",
									"tests['Activity has \"author\" property'] = activity.hasOwnProperty('author');",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{apiUrl}}/activities",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"activity\":{\"title\":\"My first TODO\", \"body\":\"This is a TODO.\", \"tagList\":[\"test\", \"personal\"]}}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Delete Article",
					"request": {
						"url": "{{apiUrl}}/articles/how-to-train-your-dragon",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Update Activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (!(environment.isIntegrationTest)) {\r",
									"var responseJSON = JSON.parse(responseBody);\r",
									"\r",
									"tests['Response contains \"activity\" property'] = responseJSON.hasOwnProperty('activity');\r",
									"\r",
									"var activity = responseJSON.activity || {};\r",
									"\r",
									"tests['Activity has \"title\" property'] = activity.hasOwnProperty('title');\r",
									"tests['Activity has \"body\" property'] = activity.hasOwnProperty('body');\r",
									"tests['Activity has \"completed\" property'] = activity.hasOwnProperty('completed');\r",
									"tests['Activity has \"dateStart\" property'] = activity.hasOwnProperty('dateStart');\r",
									"tests['Activity has \"dateEnd\" property'] = activity.hasOwnProperty('dateEnd');\r",
									"tests['Activity has \"createdAt\" property'] = activity.hasOwnProperty('createdAt');\r",
									"tests['Activity\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(activity.createdAt).toISOString() === activity.createdAt;\r",
									"tests['Activity has \"updatedAt\" property'] = activity.hasOwnProperty('updatedAt');\r",
									"tests['Activity\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(activity.updatedAt).toISOString() === activity.updatedAt;\r",
									"tests['Activity has \"tagList\" property'] = activity.hasOwnProperty('tagList');\r",
									"tests['Activity\\'s \"tagList\" property is an Array'] = Array.isArray(activity.tagList);\r",
									"tests['Activity has \"author\" property'] = activity.hasOwnProperty('author');\r",
									"}\r",
									"if (!(environment.isIntegrationTest)) {\r",
									"var responseJSON = JSON.parse(responseBody);\r",
									"\r",
									"tests['Response contains \"activity\" property'] = responseJSON.hasOwnProperty('activity');\r",
									"\r",
									"var activity = responseJSON.activity || {};\r",
									"\r",
									"tests['Activity has \"title\" property'] = activity.hasOwnProperty('title');\r",
									"tests['Activity has \"body\" property'] = activity.hasOwnProperty('body');\r",
									"tests['Activity has \"completed\" property'] = activity.hasOwnProperty('completed');\r",
									"tests['Activity has \"createdAt\" property'] = activity.hasOwnProperty('createdAt');\r",
									"tests['Activity\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(activity.createdAt).toISOString() === activity.createdAt;\r",
									"tests['Activity has \"updatedAt\" property'] = activity.hasOwnProperty('updatedAt');\r",
									"tests['Activity\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(activity.updatedAt).toISOString() === activity.updatedAt;\r",
									"tests['Activity has \"description\" property'] = activity.hasOwnProperty('description');\r",
									"tests['Activity has \"tagList\" property'] = activity.hasOwnProperty('tagList');\r",
									"tests['Activity\\'s \"tagList\" property is an Array'] = Array.isArray(activity.tagList);\r",
									"tests['Activity has \"author\" property'] = activity.hasOwnProperty('author');\r",
									"tests['Activity has \"favorited\" property'] = activity.hasOwnProperty('favorited');\r",
									"tests['Activity has \"favoritesCount\" property'] = activity.hasOwnProperty('favoritesCount');\r",
									"tests['favoritesCount is an integer'] = Number.isInteger(activity.favoritesCount);\r",
									"}\r",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{apiUrl}}/activities/596682f75a1d964424d4f427",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"activity\":{\"body\":\"This TODO just got updated.\"}}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "All Activities",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = responseCode.code === 200;",
									"",
									"tests['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(responseBody);",
									"",
									"    tests['Response contains \"articles\" property'] = responseJSON.hasOwnProperty('articles');",
									"    tests['Response contains \"articlesCount\" property'] = responseJSON.hasOwnProperty('articlesCount');",
									"    tests['articlesCount is an integer'] = Number.isInteger(responseJSON.articlesCount);",
									"",
									"    if(responseJSON.articles.length){",
									"        var article = responseJSON.articles[0];",
									"",
									"        tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
									"        tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
									"        tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
									"        tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
									"        tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
									"        tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
									"        tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
									"        tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
									"        tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
									"        tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
									"        tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
									"        tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
									"        tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
									"        tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
									"    } else {",
									"        tests['articlesCount is 0 when feed is empty'] = responseJSON.articlesCount === 0;",
									"    }",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{apiUrl}}/activities",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Activities by Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = responseCode.code === 200;\r",
									"\r",
									"tests['Response code is 200 OK'] = is200Response;\r",
									"\r",
									"if(is200Response){\r",
									"    var responseJSON = JSON.parse(responseBody);\r",
									"\r",
									"    tests['Response contains \"activities\" property'] = responseJSON.hasOwnProperty('activities');\r",
									"\r",
									"    if(responseJSON.activities.length){\r",
									"        var activity = responseJSON.activities[0];\r",
									"\r",
									"        tests['Activity has \"title\" property'] = activity.hasOwnProperty('title');\r",
									"        tests['Activity has \"body\" property'] = activity.hasOwnProperty('body');\r",
									"        tests['Activity has \"completed\" property'] = activity.hasOwnProperty('completed');\r",
									"        tests['Activity has \"dateStart\" property'] = activity.hasOwnProperty('dateStart');\r",
									"        tests['Activity has \"dateEnd\" property'] = activity.hasOwnProperty('dateEnd');\r",
									"        tests['Activity has \"createdAt\" property'] = activity.hasOwnProperty('createdAt');\r",
									"        tests['Activity\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(activity.createdAt).toISOString() === activity.createdAt;\r",
									"        tests['Activity has \"updatedAt\" property'] = activity.hasOwnProperty('updatedAt');\r",
									"        tests['Activity\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(activity.updatedAt).toISOString() === activity.updatedAt;\r",
									"        tests['Activity has \"tagList\" property'] = activity.hasOwnProperty('tagList');\r",
									"        tests['Activity\\'s \"tagList\" property is an Array'] = Array.isArray(activity.tagList);\r",
									"        tests['Activity has \"author\" property'] = activity.hasOwnProperty('author');\r",
									"    } else {\r",
									"        tests['activitysCount is 0 when feed is empty'] = responseJSON.activitysCount === 0;\r",
									"    }\r",
									"}\r",
									""
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{apiUrl}}/activities?tag=personal",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"activities"
							],
							"query": [
								{
									"key": "tag",
									"value": "personal",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Single Activity by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);\r",
									"\r",
									"tests['Response contains \"activity\" property'] = responseJSON.hasOwnProperty('activity');\r",
									"\r",
									"var activity = responseJSON.activity || {};\r",
									"\r",
									"tests['Activity has \"title\" property'] = activity.hasOwnProperty('title');\r",
									"tests['Activity has \"body\" property'] = activity.hasOwnProperty('body');\r",
									"tests['Activity has \"completed\" property'] = activity.hasOwnProperty('completed');\r",
									"tests['Activity has \"dateStart\" property'] = activity.hasOwnProperty('dateStart');\r",
									"tests['Activity has \"dateEnd\" property'] = activity.hasOwnProperty('dateEnd');\r",
									"tests['Activity has \"tagList\" property'] = activity.hasOwnProperty('tagList');\r",
									"tests['Activity\\'s \"tagList\" property is an Array'] = Array.isArray(activity.tagList);\r",
									"\r",
									"tests['Activity has \"createdAt\" property'] = activity.hasOwnProperty('createdAt');\r",
									"tests['Activity\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(activity.createdAt).toISOString() === activity.createdAt;\r",
									"tests['Activity has \"updatedAt\" property'] = activity.hasOwnProperty('updatedAt');\r",
									"tests['Activity\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(activity.updatedAt).toISOString() === activity.updatedAt;\r",
									"tests['Activity has \"description\" property'] = activity.hasOwnProperty('description');\r",
									"\r",
									"tests['Activity has \"author\" property'] = activity.hasOwnProperty('author');\r",
									"tests['Activity has \"favorited\" property'] = activity.hasOwnProperty('favorited');\r",
									"tests['Activity has \"favoritesCount\" property'] = activity.hasOwnProperty('favoritesCount');\r",
									"tests['favoritesCount is an integer'] = Number.isInteger(activity.favoritesCount);\r",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{apiUrl}}/activities/596682f75a1d964424d4f427",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"description": "",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
									"",
									"var user = responseJSON.user || {};",
									"",
									"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
									"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
									"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{apiUrl}}/users/login",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"john@jacob.com\", \"password\":\"johnnyjacob\"}}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Login and Remember Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
									"",
									"var user = responseJSON.user || {};",
									"",
									"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
									"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
									"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
									"",
									"if(tests['User has \"token\" property']){",
									"    postman.setEnvironmentVariable('token', user.token);",
									"}",
									"",
									"tests['Environment variable \"token\" has been set'] = environment.token === user.token;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{apiUrl}}/users/login",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"john@jacob.com\", \"password\":\"johnnyjacob\"}}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (!(environment.isIntegrationTest)) {",
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
									"",
									"var user = responseJSON.user || {};",
									"",
									"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
									"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
									"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{apiUrl}}/users",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"john@jacob.com\", \"password\":\"johnnyjacob\", \"username\":\"johnjacob\"}}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
									"",
									"var user = responseJSON.user || {};",
									"",
									"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
									"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
									"tests['User has \"bio\" property'] = user.hasOwnProperty('bio');",
									"tests['User has \"image\" property'] = user.hasOwnProperty('image');",
									"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{apiUrl}}/user",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
									"",
									"var user = responseJSON.user || {};",
									"",
									"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
									"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
									"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{apiUrl}}/user",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"john@jacob.com\"}}"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Tags",
			"description": "",
			"item": [
				{
					"name": "All Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var is200Response = responseCode.code === 200;",
									"",
									"tests['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(responseBody);",
									"    ",
									"    tests['Response contains \"tags\" property'] = responseJSON.hasOwnProperty('tags');",
									"    tests['\"tags\" property returned as array'] = Array.isArray(responseJSON.tags);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{apiUrl}}/tags",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		}
	]
}